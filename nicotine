#!/usr/bin/env python3
# COPYRIGHT (C) 2020-2021 Nicotine+ Team
# COPYRIGHT (C) 2020 Lene Preuss <lene.preuss@gmail.com>
# COPYRIGHT (C) 2016-2017 Michael Labouebe <gfarmerfr@free.fr>
# COPYRIGHT (C) 2008-2011 Quinox <quinox@users.sf.net>
# COPYRIGHT (C) 2006-2008 eL_vErDe <gandalf@le-vert.net>
# COPYRIGHT (C) 2006-2009 Daelstorm <daelstorm@gmail.com>
# COPYRIGHT (C) 2003-2004 Hyriand <hyriand@thegraveyard.org>
# COPYRIGHT (c) 2001-2003 Alexander Kanavin
#
# GNU GENERAL PUBLIC LICENSE
#    Version 3, 29 June 2007
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import importlib.util
import sys


def check_arguments():
    """ Parse command line arguments specified by the user """

    from pynicotine.config import config
    parser = argparse.ArgumentParser(description=_("Nicotine+ is a Soulseek client"), add_help=False)

    # Visible arguments
    parser.add_argument(
        "-h", "--help", action="help",
        help=_("show this help message and exit")
    )
    parser.add_argument(
        "-c", "--config", metavar=_("file"),
        help=_("use non-default configuration file")
    )
    parser.add_argument(
        "-p", "--plugins", metavar=_("dir"),
        help=_("use non-default directory for plugins")
    )
    parser.add_argument(
        "-t", "--enable-trayicon", action="store_true",
        help=_("enable the tray icon")
    )
    parser.add_argument(
        "-d", "--disable-trayicon", action="store_true",
        help=_("disable the tray icon")
    )
    parser.add_argument(
        "-s", "--hidden", action="store_true",
        help=_("start the program without showing window")
    )
    parser.add_argument(
        "-b", "--bindip", metavar=_("ip"),
        help=_("bind sockets to the given IP (useful for VPN)")
    )
    parser.add_argument(
        "-l", "--port", metavar=_("port"), type=int,
        help=_("listen on the given port")
    )
    parser.add_argument(
        "-r", "--rescan", action="store_true",
        help=_("rescan shared files")
    )
    parser.add_argument(
        "-n", "--headless", action="store_true",
        help=_("start the program in headless mode (no GUI)")
    )
    parser.add_argument(
        "-v", "--version", action="version", version="Nicotine+ %s" % config.version,
        help=_("display version and exit")
    )

    # Disables critical error dialog; used for integration tests
    parser.add_argument("--ci-mode", action="store_true", help=argparse.SUPPRESS)
    parser.add_argument("--gtk4-unstable", action="store_true", help=argparse.SUPPRESS)

    args = parser.parse_args()
    trayicon = None

    if args.config:
        config.filename = args.config

    if args.plugins:
        config.plugin_dir = args.plugins

    if args.enable_trayicon:
        trayicon = True

    if args.disable_trayicon:
        trayicon = False

    return trayicon, args.headless, args.hidden, args.bindip, args.port, args.ci_mode, args.rescan, args.gtk4_unstable


def check_core_dependencies():

    # Require Python >= 3.6
    try:
        assert sys.version_info[:2] >= (3, 6), '.'.join(
            map(str, sys.version_info[:3])
        )

    except AssertionError as e:
        return _("""You are using an unsupported version of Python (%(old_version)s).
You should install Python %(min_version)s or newer.""") % {
            "old_version": e,
            "min_version": "3.6"
        }

    # Require gdbm or semidbm, for faster loading of shelves
    if not importlib.util.find_spec("_gdbm") and \
            not importlib.util.find_spec("semidbm"):
        return _("Cannot find %(option1)s or %(option2)s, please install either one.") % {
            "option1": "gdbm",
            "option2": "semidbm"
        }

    return None


def check_gui_dependencies(use_gtk4=False):

    # Require GTK+ >= 3.18
    try:
        import gi

    except ImportError:
        return _("Cannot find %s, please install it.") % "pygobject"

    else:
        try:
            gi.require_version('Gtk', '4.0' if use_gtk4 else '3.0')

        except ValueError as e:
            return _("""You are using an unsupported version of GTK.
You should install GTK %s or newer.""") % "3.18"

    try:
        from gi.repository import Gtk  # noqa: F401

    except ImportError:
        return _("Cannot import the Gtk module. Bad install of the python-gobject module?")

    return None


def rescan_shares():

    from collections import deque

    from pynicotine.config import config
    from pynicotine.shares import Shares

    config.load_config()

    shares = Shares(None, config, deque())
    error = shares.rescan_public_shares(thread=False)

    if config.sections["transfers"]["enablebuddyshares"]:
        error = shares.rescan_buddy_shares(thread=False)

    if error:
        print("--------------------------------------------------")
        print(_("Failed to scan shares. If Nicotine+ is currently running, please close the program before scanning."))
        return 1

    return 0


def run_headless(network_processor):
    """ Run Nicotine+ in headless (no GUI) mode """

    import signal
    import time

    from pynicotine.config import config
    from pynicotine.logfacility import log

    config.load_config()
    log.log_levels = set(["download", "upload"] + config.sections["logging"]["debugmodes"])

    for signal_type in (signal.SIGINT, signal.SIGTERM):
        signal.signal(signal_type, network_processor.quit)

    network_processor.start()
    network_processor.connect()

    while not network_processor.shutdown:
        time.sleep(0.2)
        pass

    config.write_configuration()
    return 0


def run():
    """ Run Nicotine+ and return its exit code """

    # Support file scanning process in frozen Windows and macOS binaries
    if getattr(sys, 'frozen', False) :
        import multiprocessing
        multiprocessing.freeze_support()

    # Require pynicotine module
    if not importlib.util.find_spec("pynicotine"):
        print("""Cannot find Nicotine+ modules.
Perhaps they're installed in a directory which is not
in an interpreter's module search path.
(there could be a version mismatch between
what version of Python was used to build the Nicotine
binary package and what you try to run Nicotine+ with).""")
        return 1

    from pynicotine.i18n import apply_translation
    from pynicotine.utils import rename_process

    rename_process(b'nicotine')
    apply_translation()

    trayicon, headless, hidden, bindip, port, ci_mode, rescan, gtk4_unstable = check_arguments()
    error = check_core_dependencies()

    if error:
        print(error)
        return 1

    if rescan:
        return rescan_shares()

    # Initialize network event processor
    from pynicotine.pynicotine import NetworkEventProcessor
    network_processor = NetworkEventProcessor(bindip, port)

    # Run without a GUI (beta)
    if headless:
        return run_headless(network_processor)

    error = check_gui_dependencies(gtk4_unstable)

    if error:
        print(error)
        return 1

    # Initialize GTK-based GUI
    from pynicotine.gtkgui.frame import Application
    return Application(network_processor, trayicon, hidden, bindip, port, ci_mode).run()


if __name__ == '__main__':
    sys.exit(run())
